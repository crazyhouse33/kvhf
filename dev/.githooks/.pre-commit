#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

protected="$(dev/.githooks/.is-branch-to-protect.py dev/protected-branchs)"

deco='------'
if [ "$protected" == "1" ]; then
	echo $deco "Automatic pre-commit routing (Modified files)"  $deco
	for file in $(git diff --cached --name-only --diff-filter=ACM)
	do
		if [ "$(dev/.githooks/.file-is-to-be-ignored.py $file)" == "0" ]; then
			rea="$(realpath "$file")"
			bash -c "set -e; cd dev; ./modifiedPre-commit.bash $rea"
		else
			echo $file as been ignored in devignore
		fi
	done

fi

bash -c "set -e; cd dev; ./pre-commit.bash"



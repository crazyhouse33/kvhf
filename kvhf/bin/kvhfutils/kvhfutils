#!/usr/bin/python3
import kvhf.bin.kvhfutils.parser as parser
import sys
from kvhf.file import KVH_file
from kvhf.history_entry import all_serie
import kvhf.libs.gfe as gfe


def str_commit(commit, number_message_letter=20):
    message=commit.message[0:number_message_letter]
    if len(commit.message) >number_message_letter:
       message+="..." 
    return " ".join([commit.hexsha,':',message])

def my_input(msg):
    if not_interactive:
        sys.exit(msg)
    else:
        return input(msg+'.\n\nPlease enter a new label in the prompt:')


def merge_handle(paths, output, vertical=True, keys=None):
    res=KVH_file(key_sep=sep_key, value_sep= sep_val)
    if vertical:
        the_function=res.merge_vertical
    else:
        the_function=res.merge_horizontal
    
    for path in paths:
        file_to_merge=KVH_file(path,key_sep=sep_key, value_sep= sep_val)
        the_function(file_to_merge,keys)
    output_file(res, out_path)


def check(kvh_File, prefix=''):
    problems=kvh_File.check_report()
    if problems:
        sys.exit(prefix+problems)


def output_file(kvh_File, path):
    if path==None:
        path= "result.kvhf"
        print ("Output path had been set to", path, "by default", file=sys.stderr)
    if check_file:
        check(kvh_File, "Detected problems in output file {}:\n".format(path))
    kvh_File.dump(path)

args= parser.getArgs()

paths = args["files"]
out_path=args["out_path"]
sep_key = args["sep_key"] 
sep_val=args["sep_val"]
keys=args["keys"]
git_extract=args['git_extract']
commits_manual_selection=args['commits']
git_actualized_label=args['actualized']
merge=args["merge"]
extend_history=args["extend"]
forbiden_commits = args["commit_filter"]
branchs=args['branchs']
paths_restrict=args['path_restrict']
dirty=args['dirty']
not_interactive=args['not_interactive']
historic_merge=args["historic_merge"]
allow_gone_key=args['allow_gone_key']
check_file=args['check_file']
void_str=args['void_char']

KVH_file.default_key_sep = sep_key
KVH_file.default_value_sep =sep_val 
KVH_file.default_void_str=void_str

  
if merge:
    merge_handle(paths, out_path, vertical=True, keys=keys)
    
elif extend_history:
    merge_handle(paths, out_path, vertical=False, keys=keys)
elif keys:

    for path in paths:
        try:
            kvh_File= KVH_file(path)
        except FileNotFoundError:
            kvh_File=KVH_file()
        for key in keys:
            split= key.split(sep_key)

            if len(split)==2:
                key_name, values= split
                attr='means'
            elif len(split)==3:
                key_name, attr, values = split
            else:
                sys.exit("Error, In key add mode, the keys should be in the form KEYNAME KEYSEP VALUE1 VALUESEP VALUE2 to add values to keys or KEYNAME KEYSEP ATTRIBUTE KEYSEP VALUE1 VALUESEP VALUE2... to add drawing attribute to an existant key ")

            where_to_extend = getattr(kvh_File.dico[key_name], attr)
            if attr in all_serie:# dont parse for not serie stuff
                where_to_extend.extend(kvh_File.parse_values(values))
            else:
                setattr(kvh_File.dico[key_name], attr, values)
        output_file(kvh_File,path)

elif git_extract or git_actualized_label:
    if not paths:
        sys.exit("At least one file to extract must be given in order to localize git repo")
    if git_extract:
        
        repo= gfe.get_repo(paths[0])
        res= KVH_file()
        for commit in gfe.explore_commits(repo, commits=commits_manual_selection, filter=forbiden_commits, branchs=branchs, paths_restrict=paths_restrict,reverse=True):
            files = commit.search_files(paths)
            commit_kvh_file= KVH_file()
            for path, file in files:
                new_file=KVH_file(file, key_sep=sep_key, value_sep= sep_val)
                if check_file:
                    check(new_file, "Detected problem in commit {} at file {}:\n".format(str_commit(commit), path))
                commit_kvh_file.merge_vertical(new_file,keys) 
            print ("Recolting commit", str_commit(commit,20), file=sys.stderr) 
            res.merge_historic(commit_kvh_file,keys)

        #We got the commits, now we need to add current files if they is one dirty ones
        if dirty and gfe.diffs(paths, repo):
            current_kvh_file= KVH_file()
            for path in paths:
                    to_merge=KVH_file(path)
                    current_kvh_file.merge_vertical(to_merge,keys)
            res.merge_horizontal(current_kvh_file, keys)
        output_file(res,out_path)

    elif git_actualized_label:
        

        for path in paths:
            current_file = KVH_file(path)
            user_label=None
            if not current_file.labels:
                user_label=my_input("No label detected for "+ path)

            try:
                repo=gfe.get_repo(path)
                head=repo.head.commit
            except Exception:#There is no commit for this path so its new
                continue
            _, the_file=head.search_files(path)
            old_file= KVH_file(the_file )
            if old_file.labels and current_file.labels[-1] == old_file.labels[-1]:
                user_label=my_input("The label of "+ path + " did not change since last commit")
            if user_label:
                current_file.labels.append(user_label)
            output_file(current_file,path)
            current_key, current_size=current_file.get_max_len()
            old_key,old_size=old_file.get_max_len()
            if current_size != old_size+1:
                sys.exit("Detected more than one commit had been integrated at once (diff={}, should be 1). This can happen if your pre-commit routine fail after you merged the file. You should delete the file and regenerate it.".format(current_size - old_size))


                
elif historic_merge:
    if not len(paths)==2:
        sys.exit("An historical merge only work with two files as arguments")
    past=KVH_file(path[0])
    to_merge=KVH_file(paths[-1])
    
    olds, new=res.merge_historic(to_merge, keys)

    if new:
        print ("New detected keys:\n", "\n".join(new), file=sys.stderr)
    if old:
        print ("Old keys are now missing:\n", "\n".join(old), file=sys.stderr)
        if not allow_gone_key:
            sys.exit("Exiting cause --allow-gone-key is off")
    output_file(res, out_path)
 




elif check_file:
    for path in paths:
        kvh_File= KVH_file(path)
        check(kvh_File, "Detected problem in file {}".format(path))

